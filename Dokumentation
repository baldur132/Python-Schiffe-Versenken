Python - Programmentwurf

Team Mitglieder:
Name	        e-Mail (DHBW)
Baldur Siegel 	siegel.baldur-it20@it.dhbw-ravensburg.de
Jonas Straub	straub.jonas-it20@it.dhbw-ravensburg.de
Samuel Amann	amann.samuel-it20@it.dhbw-ravensburg.de
Lukas Lutz	    lutz.lukas-it20@it.dhbw-ravensburg.de

Verwendete Python Version: Python 3.9.1
Verwendete Pylint Version: Pylint 2.6.0
Verwendete nachinstallierte Bibliotheken: Keyboard

Probleme:
Unter Mac Os / Linux muss die main.py Funktion außerhalb von Pycharm/VSCodium… im Terminal mit dem sudo Befehl gestartet werden,
da Mac Os / Linux die Tastendrücke abfängt und so das Spiel nicht gespielt werden kann (heißt auch, das das keyboard modul auch
auf Linux unter dem root user installiert werden muss). Unter jedem System hat Pycharm das Problem den Befehl os.get_terminal_width() 
nicht ausführen zu können, da Pycharm kein richtiges Terminal sondern ein embedded terminal emulator verwendet und so die Größe 
nicht festgestellt werden kann (dadurch das ioctl() im pycharm terminal nicht existiert).

Beschreibung des Dateiformats zum Speichern des Spiels:
•	Gespeicherter Spielstand einfügen
Um den Spielstand zu speichern benutzen wir die serialisierte Ausgabe von dem pickle Python modul. Dabei wird das Game
Objekt in einem byte Stream serialisiert und einfach ein einer Datei gespeichert. Um dem Spielstand wieder zu laden
wird dieser byte Stream einfach mit deim pickle modul wieder eingelesen und die wesentlichen Attributen importiert.

Beschreibung des Benutzerinterfaces:
Zu Beginn des Spiels wird eine Abfrage gestartet ob man ein neues Spiel starten, das angefangene Spiel weiterspielen
oder das Programm beenden will. Um hier durch zu navigieren werden die Tasten A für links, D für rechts und die
Leertaste um die Eingabe zu bestätigen genutzt. Wenn ein neues Spiel beginnen gewählt wird öffnet sich ein Untermenü
mit Single Player oder 1v1 und Zurück welches sich auch mit A, D navigieren lässt. Grundlegend wird danach mit
W, A, S, D navigiert, wenn man nun das Spiel beginnt lassen sich die Schiffe mit W nach oben, A nach links, S nach
unten und D nach rechts verschieben. Die Taste R rotiert das Schiff und mit der Leertaste wird wieder bestätigt.
Wenn nun alle Schiffe gesetzt wurden und das Spiel bis zum Tode beginnt lässt sich wieder das Muster der Steuerung
erkennen und der Schuss wird wie gewohnt mit W, A, S, D bewegt und mit der Leertaste endgültig bestätigt. In dieser
phase kann man auch die Q taste benutzen um seine eigenen Schiffe anzuschauen.
Während dem Spiel kann man zu fast jeder zeit die P Taste drücken um dem Pause Menü hochzubringen. Innerhalb des Menüs
kann man mit dem 1 2 3 Tasten eine Option auswählen und mit Leertaste bestätigen. 

Beschreibung der Architektur:
Insgesamt gibt es 3 große Klassen Game, Ship und Player. Die Klasse Player besitzt zwei wichtige Unterklassen Human und
Ai. Diese haben zwei fast identische Methoden da sie diese brauchen einmal shoot und place_ships. Place_ships
platziert am Anfang die Schiffe, das ist aber bei beiden unterschiedlich da die Methode Ai die Schiffe zufällig setzt.
Bei Human ist das wesentlich anders die Methode capture_input_place fängt die Keyboardtasten ab und ruft die Methode
draw_place_ship auf und bewegt dann aktiv das Schiff, oder setzt dem Schiff wenn der Benutzer die entsprechende Taste
drückt. Diese ruft am ende die print_battlefield Methode auf, welches das Spielfeld erneut mahlt um den bewegtem Schiff 
darzustellen, sowie Schiffe die schon auf dem Spielfeld gesetzt worden sind. 
Die Methode shoot in Ai sucht ein zufälliges Feld aus und stellt auch gleichzeitig fest dass nicht ein Feld zweimal 
beschossen wird. Danach ruft diese die Methode get_shot vom Gegner auf und man gibt die Position an wohin man geschossen 
hat und gibt auch gleich die Felder mit wo man schon beschossen hat mit. Der Rückgabewert dieser Methode gibt dann an,
ob am diesen Feld getroffen worden ist oder nicht, sowie ob ein Schiff gesenkt worden ist und ob man gewonnen hat.
Die Attribute shooting_range speichert alle Felder wo schon beschossen wurden und ob da ein treffer war. Bei Human 
ist die shoot Methode relativ identisch. Bei shoot hingegen muss abgefragt werden wohin geschossen werden
will. Diese ruft dann get_shoot als erstes auf und der Spieler gibt an wohin geschossen werden soll. Dabei ist die
Tastenabfrage fast identisch zu capture_input_place. 
Die Klasse Ship stellt das Schiff dar und hat auch die wesendlichen Schiff- Attributen gespeichert. Für die Klasse Ship
gibt es zwei wichtige Methoden place und get_hits. Place schaut ob ein Schiff platziert werden darf und platziert es
dann auf dem Spielbrett wenn es nicht auf einen anderen Schiff aufliegt und komplett auf dem Brett ist. Die Methode get_hits
prüft ab, ob ein Schuss sein Schiff Objekt trifft oder nicht. 
Die Klasse Game ist zuständig für den gesamten Spielablauf. Es steuert das ganze Menüsystem und regelt den Spielablauf. 
In Game wird ein Spiel erstellt, geladen oder fortgesetzt und ist dabei das Kleber des ganzen Spiels.

Beschreibung des Computergegners (4er Gruppen):
Der Computergegner ist ein Spieler der seine Schiffe zufällig auf dem Spielfeld platziert sowie er auch zufällig seine
Schüsse abgibt, jedoch ohne das es mehrmals auf das gleiche Feld schießt.

Dokumentation von einem kompletten Spielablauf:
Datei anbei als spielablauf.txt.

Log von den Tests:
test_player.py:
test_ship.py:


Bewertung der Testergebnisse:
•	Grund für fehlschlagende Tests


Code-Coverage Ausgabe:
•	Tests mit Coverage ausführen und Ausgabe hier einfügen


Bewertung der Coverage und Sinnvollheit der Tests:
•	Gewünscht ist eine Coverage von min 75%
◦	Wurde dies erreicht? Wenn nein, warum nicht?
•	Begründet warum ihr euch sicher seid alles mit Tests abgedeckt zu haben
•	Fehlerfälle in den Tests überprüft?


Bewertung der Fehlersicherheit:
•	Werden Fehleingaben korrekt abgefangen?
Fehleingaben sind in dem Programm im ersten Sinne dadurch verhindert, das die eingabe Möglichkeiten eingeschränkt sind.
Benutzer können mit dem interface nur mit WASD sowie einige andere tasten mit dem Spiel interagieren. Dabei sind aber nicht
alle Fehlermöglichkeiten ausgeschlossen. Es muss sicher gestellt werden das der Cursor bzw. das Schiff nicht aus dem Feld
Rausbewegt werden darf. Für die Schiffplatzierung sind zwei Sicherheitsstufen implementiert: zum einen die Callback Funktion
verhindert das die Schiffe aus dem Spielfeld gedrückt werden dürfen, und zum anderen berechnet auch die place() Funktion in
der Ship Klasse ob die Position des Schiffes valide ist. Für den Schusscursor ist nur in der Callback Funktion einen Check
der sichert, das der Cursor sich im Spielfeld befindet. Innerhalb von draw_selections (routine die die Menüs darstellt) ist 
auch ein Check der verhindert, das die selection_pointer Attribute größer ist als die anzahl der gegebenen Optionen.
    ◦	Nenne 2 Beispiele wo ein Fehler abgefangen wird
         - Während der Schiffbewegung
         - Beim Aufbau der Menüoptionen

Pylint Ausgabe:
Game.py:
    game.py:19:0: R0902: Too many instance attributes (14/7) (too-many-instance-attributes)
    ------------------------------------------------------------------
    Your code has been rated at 9.96/10 (previous run: 9.96/10, +0.00)

Player.py:
    player.py:204:4: R0913: Too many arguments (6/5) (too-many-arguments)
    ------------------------------------------------------------------
    Your code has been rated at 9.97/10 (previous run: 9.97/10, +0.00)

Ship.py:
    ship.py:29:4: R0913: Too many arguments (6/5) (too-many-arguments)
    ------------------------------------------------------------------
    Your code has been rated at 9.83/10 (previous run: 9.83/10, +0.00)

Main.py:
    --------------------------------------------------------------------
    Your code has been rated at 10.00/10 (previous run: 10.00/10, +0.00)


Bewertung der Code-Qualität/Lesbarkeit:
•	Begründet noch vorhandene Pylint Warnungen
Es sind noch 3 pylint Kommentare vorhanden:
 - game.py      z.19:   class Game:
 - player.py    z.204:  def print_battlefield(self, mode = "none", title = None, aside = None, overlay = None, cursor = None):
 - ship.py      z.29:   def place(self, pos = None, orient = None, ships = None, board_size = 10, test = False):

Die Begründungen sind jeweils vor jeder Zeile zu finden, auf Englisch.

•	Begründet warum euer Code gut lesbar ist
Das gesamte Modul ist fast zu 100% im objektorientiertem Stil programmiert. Dabei würde immer inbetracht gehalten,
dass die Bezeichnungen für die jeweiligen Attributen und Methoden logisch nachvollziebar sind. Sonst ist die Stuktur
vom Programm relativ einfach gehalten, welches zum Verständis stark beiträgt. Methoden sind nach ihrer Funktion
gruppiert, callback funktionen sowie zusammenhängende Unterfunktionen sind über ihrer Oberfunktion geordnet. Dabei
ist es einfach nachzuvollziehen welches code welches aufruft. 

Bewertungstabelle:
•	Ausgefüllte Bewertungstabelle

